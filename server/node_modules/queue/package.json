{
  "_from": "queue",
  "_id": "queue@4.4.2",
  "_inBundle": false,
  "_integrity": "sha512-fSMRXbwhMwipcDZ08enW2vl+YDmAmhcNcr43sCJL8DIg+CFOsoRLG23ctxA+fwNk1w55SePSiS7oqQQSgQoVJQ==",
  "_location": "/queue",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "queue",
    "fetchSpec": "latest",
    "name": "queue",
    "raw": "queue",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://unpm.uberinternal.com/queue/-/queue-4.4.2.tgz",
  "_shasum": "5a9733d9a8b8bd1b36e934bc9c55ab89b28e29c7",
  "_shrinkwrap": null,
  "_spec": "queue",
  "_where": "/Users/charlyngonda/Projects/sharknicorn",
  "author": {
    "email": "jesse.tane@gmail.com",
    "name": "Jesse Tane"
  },
  "bugs": {
    "url": "https://github.com/jessetane/queue/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "inherits": "~2.0.0"
  },
  "deprecated": false,
  "description": "asynchronous function queue with adjustable concurrency",
  "devDependencies": {
    "browserify": "^5.9.1",
    "coveralls": "^2.11.2",
    "istanbul": "^0.3.2",
    "standard": "^8.6.0",
    "tape": "^2.14.0"
  },
  "homepage": "https://github.com/jessetane/queue#readme",
  "keywords": [
    "queue",
    "async",
    "asynchronous",
    "synchronous",
    "job",
    "task",
    "concurrency",
    "concurrent"
  ],
  "license": "MIT",
  "name": "queue",
  "optionalDependencies": {},
  "readme": "```\n   ____  __  _____  __  _____\n  / __ `/ / / / _ \\/ / / / _ \\\n / /_/ / /_/ /  __/ /_/ /  __/\n \\__, /\\__,_/\\___/\\__,_/\\___/\n   /_/\n```\nAsynchronous function queue with adjustable concurrency.\n\n[![npm](http://img.shields.io/npm/v/queue.svg?style=flat-square)](http://www.npmjs.org/queue)\n[![tests](https://img.shields.io/travis/jessetane/queue.svg?style=flat-square&branch=master)](https://travis-ci.org/jessetane/queue)\n[![coverage](https://img.shields.io/coveralls/jessetane/queue.svg?style=flat-square&branch=master)](https://coveralls.io/r/jessetane/queue)\n\nThis module exports a class `Queue` that implements most of the `Array` API. Pass async functions (ones that accept a callback or return a promise) to an instance's additive array methods. Processing begins when you call `q.start()`.\n\n## Example\n`npm run example`\n``` javascript\nvar queue = require('../')\n\nvar q = queue()\nvar results = []\n\n// add jobs using the familiar Array API\nq.push(function (cb) {\n  results.push('two')\n  cb()\n})\n\nq.push(\n  function (cb) {\n    results.push('four')\n    cb()\n  },\n  function (cb) {\n    results.push('five')\n    cb()\n  }\n)\n\n// jobs can accept a callback or return a promise\nq.push(function () {\n  return new Promise(function (resolve, reject) {\n    results.push('one')\n    resolve()\n  })\n})\n\nq.unshift(function (cb) {\n  results.push('one')\n  cb()\n})\n\nq.splice(2, 0, function (cb) {\n  results.push('three')\n  cb()\n})\n\n// use the timeout feature to deal with jobs that\n// take too long or forget to execute a callback\nq.timeout = 100\n\nq.on('timeout', function (next, job) {\n  console.log('job timed out:', job.toString().replace(/\\n/g, ''))\n  next()\n})\n\nq.push(function (cb) {\n  setTimeout(function () {\n    console.log('slow job finished')\n    cb()\n  }, 200)\n})\n\nq.push(function (cb) {\n  console.log('forgot to execute callback')\n})\n\n// get notified when jobs complete\nq.on('success', function (result, job) {\n  console.log('job finished processing:', job.toString().replace(/\\n/g, ''))\n})\n\n// begin processing, get notified on end / failure\nq.start(function (err) {\n  if (err) throw err\n  console.log('all done:', results)\n})\n```\n\n## Install\n`npm install queue`\n\n## Test\n`npm test`\n`npm run test-browser`\n\n## API\n\n### `var q = queue([opts])`\nConstructor. `opts` may contain inital values for:\n* `q.concurrency`\n* `q.timeout`\n* `q.autostart`\n* `q.results`\n\n## Instance methods\n### `q.start([cb])`\ncb, if passed, will be called when the queue empties or when an error occurs.\n\n### `q.stop()`\nStops the queue. can be resumed with `q.start()`.\n\n### `q.end([err])`\nStop and empty the queue immediately.\n\n## Instance methods mixed in from `Array`\nMozilla has docs on how these methods work [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array). Note that `slice` does not copy the queue.\n### `q.push(element1, ..., elementN)`\n### `q.unshift(element1, ..., elementN)`\n### `q.splice(index , howMany[, element1[, ...[, elementN]]])`\n### `q.pop()`\n### `q.shift()`\n### `q.slice(begin[, end])`\n### `q.reverse()`\n### `q.indexOf(searchElement[, fromIndex])`\n### `q.lastIndexOf(searchElement[, fromIndex])`\n\n## Properties\n### `q.concurrency`\nMax number of jobs the queue should process concurrently, defaults to `Infinity`.\n\n### `q.timeout`\nMilliseconds to wait for a job to execute its callback.\n\n### `q.autostart`\nEnsures the queue is always running if jobs are available. Useful in situations where you are using a queue only for concurrency control.\n\n### `q.results`\nAn array to set job callback arguments on.\n\n### `q.length`\nJobs pending + jobs to process (readonly).\n\n## Events\n\n### `q.emit('success', result, job)`\nAfter a job executes its callback.\n\n### `q.emit('error', err, job)`\nAfter a job passes an error to its callback.\n\n### `q.emit('timeout', continue, job)`\nAfter `q.timeout` milliseconds have elapsed and a job has not executed its callback.\n\n### `q.emit('end'[, err])`\nAfter all jobs have been processed\n\n## Releases\nThe latest stable release is published to [npm](http://npmjs.org/queue). Abbreviated changelog below:\n* [4.4](https://github.com/jessetane/queue/archive/4.4.0.tar.gz)\n  * Add results feature\n* [4.3](https://github.com/jessetane/queue/archive/4.3.0.tar.gz)\n  * Add promise support (@kwolfy)\n* [4.2](https://github.com/jessetane/queue/archive/4.2.0.tar.gz)\n  * Unref timers on end\n* [4.1](https://github.com/jessetane/queue/archive/4.1.0.tar.gz)\n  * Add autostart feature\n* [4.0](https://github.com/jessetane/queue/archive/4.0.0.tar.gz)\n  * Change license to MIT\n* [3.1.x](https://github.com/jessetane/queue/archive/3.0.6.tar.gz)\n  * Add .npmignore\n* [3.0.x](https://github.com/jessetane/queue/archive/3.0.6.tar.gz)\n  * Change the default concurrency to `Infinity`\n  * Allow `q.start()` to accept an optional callback executed on `q.emit('end')`\n* [2.x](https://github.com/jessetane/queue/archive/2.2.0.tar.gz)\n  * Major api changes / not backwards compatible with 1.x\n* [1.x](https://github.com/jessetane/queue/archive/1.0.2.tar.gz)\n  * Early prototype\n\n## License\nCopyright Â© 2014 Jesse Tane <jesse.tane@gmail.com>\n\nThis work is free. You can redistribute it and/or modify it under the\nterms of the [MIT License](https://opensource.org/licenses/MIT).\nSee LICENSE for full details.\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jessetane/queue.git"
  },
  "scripts": {
    "example": "node example",
    "lint": "standard",
    "test": "standard && node test",
    "test-browser": "standard && browserify test/index.js > test/bundle.js && echo \"open test/index.html in your browser\"",
    "travis": "standard && istanbul cover test --report lcovonly && cat coverage/lcov.info | coveralls"
  },
  "version": "4.4.2"
}
